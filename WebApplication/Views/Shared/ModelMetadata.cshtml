@model IModelMetadata
@helper RenderModelMetadata(IModelMetadata modelMetadata, int level)
{
	<ul>
		<li>
			<h2>@(level == 1 ? modelMetadata.Order + ". " : string.Empty)@modelMetadata.GetDisplayName()</h2>
			<ul>
				<li>
					<strong>AdditionalValues: </strong>
					<ul>
						@foreach(var item in modelMetadata.AdditionalValues)
						{
							<li>
								<strong>@item.Key: </strong>@item.Value
							</li>
						}
					</ul>
				</li>
				<li>
					<strong>Container: </strong>@modelMetadata.Container
				</li>
				<li>
					<strong>ContainerType: </strong>@modelMetadata.ContainerType
				</li>
				<li>
					<strong>ConvertEmptyStringToNull: </strong>@modelMetadata.ConvertEmptyStringToNull
				</li>
				<li>
					<strong>DataTypeName: </strong>@modelMetadata.DataTypeName
				</li>
				<li>
					<strong>Description: </strong>@modelMetadata.Description
				</li>
				<li>
					<strong>DisplayFormatString: </strong>@modelMetadata.DisplayFormatString
				</li>
				<li>
					<strong>DisplayName: </strong>@modelMetadata.DisplayName
				</li>
				<li>
					<strong>EditFormatString: </strong>@modelMetadata.EditFormatString
				</li>
				<li>
					<strong>GetDisplayName(): </strong>@modelMetadata.GetDisplayName()
				</li>
				<li>
					<strong>GroupName: </strong>@modelMetadata.GroupName
				</li>
				<li>
					<strong>HideSurroundingHtml: </strong>@modelMetadata.HideSurroundingHtml
				</li>
				<li>
					<strong>HtmlEncode: </strong>@modelMetadata.HtmlEncode
				</li>
				<li>
					<strong>IsComplexType: </strong>@modelMetadata.IsComplexType
				</li>
				<li>
					<strong>IsNullableValueType: </strong>@modelMetadata.IsNullableValueType
				</li>
				<li>
					<strong>IsReadOnly: </strong>@modelMetadata.IsReadOnly
				</li>
				<li>
					<strong>IsRequired: </strong>@modelMetadata.IsRequired
				</li>
				<li>
					<strong>Model: </strong>@modelMetadata.Model
				</li>
				<li>
					<strong>ModelType: </strong>@modelMetadata.ModelType
				</li>
				<li>
					<strong>NullDisplayText: </strong>@modelMetadata.NullDisplayText
				</li>
				<li>
					<strong>Order: </strong>@modelMetadata.Order
				</li>
				<li>
					<strong>PropertyName: </strong>@modelMetadata.PropertyName
				</li>
				<li>
					<strong>RequestValidationEnabled: </strong>@modelMetadata.RequestValidationEnabled
				</li>
				<li>
					<strong>ShortDisplayName: </strong>@modelMetadata.ShortDisplayName
				</li>
				<li>
					<strong>ShowForDisplay: </strong>@modelMetadata.ShowForDisplay
				</li>
				<li>
					<strong>ShowForEdit: </strong>@modelMetadata.ShowForEdit
				</li>
				<li>
					<strong>SimpleDisplayText: </strong>@modelMetadata.SimpleDisplayText
				</li>
				<li>
					<strong>TemplateHint: </strong>@modelMetadata.TemplateHint
				</li>
				<li>
					<strong>Watermark: </strong>@modelMetadata.Watermark
				</li>
				@if(level < 1)
				{
					<li>
						<strong>Properties: </strong>
						@foreach(var property in modelMetadata.Properties.OrderBy(property => property.Order))
						{
							@RenderModelMetadata(property, level + 1)
						}
					</li>
				}
				<li>
					<strong>GetValidators(): </strong>
					@if(modelMetadata.GetValidators(ViewContext).Any())
					{
						<ul>
							@foreach(var validator in modelMetadata.GetValidators(ViewContext))
							{
								<li>
									<strong>GetType(): </strong>@validator.GetType()
								</li>
							}
						</ul>
					}
				</li>
			</ul>
		</li>
	</ul>
}
@RenderModelMetadata(Model, 0)